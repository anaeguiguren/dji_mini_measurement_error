launch.chest = 1.4 # Mateo's chest height
camera.height = 0.045 # cameras distance above the base of the drone's legsfrom legs
dat$altitude.fix <- dat$altitude + launch.chest + camera.height
head(dat)
morphometrix <-function(image.width, sensor.width, focal.length, altitude, pixel.length){
#' @param image.width the maximum image width in pixels
#' @param sensor.width the true sensor width in mm
#' @param focal.length the true focal length im mm
#' @param altitude the drone's height over the water in meters
#' @param pixel.length the object's length in pixels
GSD <- (altitude/focal.length) * (sensor.width/image.width)
length.m <- GSD * pixel.length
return(length.m)
}
morphometrix <-function(image.width = 4000, sensor.width = 6.17, focal.length = 4.25531, altitude, pixel.length){
#' @description all constant parameters are set to the DJI mini specs as a default
#' @param image.width the maximum image width in pixels
#' @param sensor.width the true sensor width in mm
#' @param focal.length the true focal length im mm
#' @param altitude the drone's height over the water in meters
#' @param pixel.length the object's length in pixels
GSD <- (altitude/focal.length) * (sensor.width/image.width)
length.m <- GSD * pixel.length
return(length.m)
}
morphometrix <-function(image.width = 4000, sensor.width = 6.17, focal.length = 4.25531, altitude, pixel.length){
#' @description all constant parameters are set to the DJI mini specs as a default
#' @param image.width the maximum image width in pixels
#' @param sensor.width the true sensor width in mm
#' @param focal.length the true focal length im mm
#' @param altitude the drone's height over the water in meters
#' @param pixel.length the object's length in pixels
GSD <- (altitude/focal.length) * (sensor.width/image.width)
length.m <- GSD * pixel.length
return(length.m)
}
# try with desk measurements:
# Desk trial:
true.length.a = 30.48
morphometrix(altitude = 3.55, pixel.length = 260)
morphometrix(altitude = 355.9175, pixel.length = 260)
morphometrix(altitude = 355.9175, pixel.length = 260, image.width = 3840)
morphometrix(altitude = 799.1475, pixel.length = 415.75, image.width = 4000)
morphometrix(altitude = 799.1475, pixel.length = 415.75, image.width = 1920)
# Door trial (1920):
#sensor.width = 6.3
true.length.c = 217.17
distance.c = 799.1475
image.width = 1920
pixel.length.c = 415.75
alpha.c = (true.length.c/(distance.c*pixel.length.c))*image.width
alpha.c
# all
v <- c(alpha.a,alpha.b, alpha.c)
summary(v)
#Measuring DJI Mini2 Focal length
estimate.alpha <- function(length, distance, pixel.length, image.width){
(length/(distance*pixel.length))*image.width
}
# Desk trial:
true.length.a = 30.48
distance.a = 355.9175
image.width = 3840
pixel.length.a = 260
alpha.a = (true.length.a/(distance.a*pixel.length.a))*image.width
# Door trial (3840):
true.length.b = 217.17
distance.b = 799.1475
image.width = 3840
pixel.length.b = 832.67
alpha.b = (true.length.b/(distance.b*pixel.length.b))*image.width
alpha.b
# Door trial (1920):
#sensor.width = 6.3
true.length.c = 217.17
distance.c = 799.1475
image.width = 1920
pixel.length.c = 415.75
alpha.c = (true.length.c/(distance.c*pixel.length.c))*image.width
# all
v <- c(alpha.a,alpha.b, alpha.c)
summary(v)
morpho.length.alpha <- function(alpha, image.width,altitude, length.pixels){
length = (alpha/image.width) * altitude * length.pixels
return(length)
}
y  <- morpho.length.alpha(alpha = v, altitude = distance.b,
length.pixels = pixel.length.b,
image.width = 3840)
(y- true.length.c)*100/true.length
(y- true.length.c)*100/true.length.c
a <- read.csv("/Users/anacristinaeguigurenburneo/Documents/DJIMini2_FocalLength_Measurement/DJIMini2_FocalLength_Measurement.csv", header = T)
a$alpha <- (a$True_Length/(a$Distance*a$Pixel_Length))*a$Image_Width
summary(a$alpha)
a$res <- "low"
a$res[which(a$Image_Width>2000)] <- 'high'
a$res <- factor(a$res)
plot(a$alpha, col = as.numeric(a$res))
median(c(a$alpha, alpha.a))
sensor.width/image.width
pixel.dimension <- function(image.width, sensor.width){
sensor.width/image.width
}
6.17/4000
return(focal.length)
f.focal.lenth <- function(sensor.width, FOV.deg){
focal.length = sensor.width/(2*tan(FOV.deg*pi/360))
return(focal.length)
}
f.focal.length(sensor.width = 6.2, FOV.deg = 83)
f.focal.length <- function(sensor.width, FOV.deg){
focal.length = sensor.width/(2*tan(FOV.deg*pi/360))
return(focal.length)
}
f.focal.length(sensor.width = 6.2, FOV.deg = 83)
f.focal.length(sensor.width = 6.17, FOV.deg = 83)
#Re callibrate with new information:
library(circular)
f.focal.length <- function(sensor.width, FOV){
focal.length = sensor.width/(2*tan(rad(FOV)/2))
return(focal.length)
}
f.focal.length(sensor.width = 6.17, FOV = 83)
length.morphometrix <-function(image.width = 4000,
sensor.width = 6.17,
focal.length = 3.5,
altitude,
pixel.length){
#' @description all constant parameters are set to the DJI mini specs as a default
#' @param image.width the maximum image width in pixels
#' @param sensor.width the true sensor width in mm
#' @param focal.length the true focal length im mm
#' @param altitude the drone's height over the water in meters
#' @param pixel.length the object's length in pixels
GSD <- (altitude/focal.length) * (sensor.width/image.width)
length.m <- GSD * pixel.length
return(length.m)
}
morphometrix(altitude = 355.9175, pixel.length = 260, image.width = 4000)
length.morphometrix <-function(image.width = 4000,
sensor.width = 6.17,
focal.length = 3.5,
altitude,
pixel.length){
#' @description all constant parameters are set to the DJI mini specs as a default
#' @param image.width the maximum image width in pixels
#' @param sensor.width the true sensor width in mm
#' @param focal.length the true focal length im mm
#' @param altitude the drone's height over the water in meters
#' @param pixel.length the object's length in pixels
GSD <- (altitude/focal.length) * (sensor.width/image.width)
length.m <- GSD * pixel.length
return(length.m)
}
length.morphometrix(altitude = 355.9175, pixel.length = 260, image.width = 4000)
diag.35mm <- sqrt(36^2 + 24^2)
diag.35mm
diag.mini <- sqrt(6.2^2 + 4.65^2)
crop.factor = diag.35mm/diag.mini
crop.factor
focal.length = 24/crop.factor
focal.length
length.morphometrix <-function(image.width = 4000,
sensor.width = 6.17,
focal.length = 4.298927,
altitude,
pixel.length){
#' @description all constant parameters are set to the DJI mini specs as a default
#' @param image.width the maximum image width in pixels
#' @param sensor.width the true sensor width in mm
#' @param focal.length the true focal length im mm
#' @param altitude the drone's height over the water in meters
#' @param pixel.length the object's length in pixels
GSD <- (altitude/focal.length) * (sensor.width/image.width)
length.m <- GSD * pixel.length
return(length.m)
}
length.morphometrix <-function(image.width = 4000,
sensor.width = 6.2,
focal.length = 4.298927,
altitude,
pixel.length){
#' @description all constant parameters are set to the DJI mini specs as a default
#' @param image.width the maximum image width in pixels
#' @param sensor.width the true sensor width in mm
#' @param focal.length the true focal length im mm
#' @param altitude the drone's height over the water in meters
#' @param pixel.length the object's length in pixels
GSD <- (altitude/focal.length) * (sensor.width/image.width)
length.m <- GSD * pixel.length
return(length.m)
}
length.(altitude = 355.9175, pixel.length = 260, image.width = 4000)
length.morphometrix(altitude = 355.9175, pixel.length = 260, image.width = 4000)
length.morphometrix(altitude = 355.9175, pixel.length = 260, image.width = 3840)
6.2 * 1920/4000
6.2 * (1920/4000)
6.2 * (1080/3000)
6.2 * (1080/4000)
diag.phantom <- sqrt(13.2^2 +8.8^2)
diag.phantom <- sqrt(13.2^2 +8.8^2)
diag.phantom
diag.mini
crop.factor.phantom <- diag.35mm/diag.phantom
24/crop.factor.phantom
length.morphometrix <-function(px.dimension = 0.00000155,
altitude,
pixel.length){
#' @description all constant parameters are set to the DJI mini specs as a default
#' @param px.dimension the size of pixels in meters
#' @param altitude the drone's height over the water in meters
#' @param pixel.length the object's length in pixels
GSD <- (px.dimension * altitude)focal.length
length.morphometrix <-function(px.dimension = 0.00000155,
altitude,
pixel.length){
#' @description all constant parameters are set to the DJI mini specs as a default
#' @param px.dimension the size of pixels in meters
#' @param altitude the drone's height over the water in meters
#' @param pixel.length the object's length in pixels
GSD <- (px.dimension * altitude)*focal.length
length.m <- GSD * pixel.length
return(length.m)
}
length.morphometrix(altitude = 355.9175, pixel.length = 260)
length.morphometrix <-function(px.dimension = 0.00000155,
altitude,
pixel.length){
#' @description all constant parameters are set to the DJI mini specs as a default
#' @param px.dimension the size of pixels in meters
#' @param altitude the drone's height over the water in meters
#' @param pixel.length the object's length in pixels
GSD <- (px.dimension * altitude)/focal.length
length.m <- GSD * pixel.length
return(length.m)
}
length.morphometrix(altitude = 355.9175, pixel.length = 260)
length.morphometrix <-function(px.dimension = 0.00155,
altitude,
pixel.length){
#' @description all constant parameters are set to the DJI mini specs as a default
#' @param px.dimension the size of pixels in meters
#' @param altitude the drone's height over the water in meters
#' @param pixel.length the object's length in pixels
GSD <- (px.dimension * altitude)/focal.length
length.m <- GSD * pixel.length
return(length.m)
}
length.morphometrix(altitude = 355.9175, pixel.length = 260)
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/anacristinaeguigurenburneo/Documents/DJI_Mini2_Measurement_Error/")
source("Scripts/Gal23_DroneMeasurementError_DataPrep.R")
source("Scripts/Gal23_DroneMeasurementError_DataPrep.R")
library(ggplot2)
px.length <- function(l.m, p.d, f.l = 4.25531, a.m){
(l.m/p.d)*(f.l/a.m)
}
#calculate pixel length:
dat$pixel.length <- px.length(l.m=dat$length,
p.d = dat$pixelDimension.old,
a.m = dat$altitude)
# fix pixel dimensions:
dat$pixelDimension<-NA
dat$pixelDimension <- 6.3/dat$ImageWidth
dat<- dat %>% select(Date, FlightNo, imageName, timeStamp, altitudeRaw = altitude, imageWidth = ImageWidth, pixel.length, position = pos)
head(dat)
#recalculate Balaena's length in m, with new altitude
boat.height = 1.03- 0.24# balaena's altitude over the water - toe rail
launch.chest = 1.4 # Mateo's chest height
camera.height = 0.045 # cameras distance above the base of the drone's legsfrom legs
dat$altitude.fix <- dat$altitude + launch.chest + camera.height
head(dat)
length.morphometrix <-function(px.dimension = 0.00155,
altitude,
pixel.length){
#' @description all constant parameters are set to the DJI mini specs as a default
#' @param px.dimension the size of pixels in centimeters - default value is set for 4K video
#' @param altitude the drone's height over the water in meters
#' @param pixel.length the object's length in pixels
GSD <- (px.dimension * altitude)/focal.length
length.m <- GSD * pixel.length
return(length.m)
}
which(dat$imageWidth==3840)
summary(dat$imageWidth)
dat$bal.length<- length.morphometrix(altitude = dat$altitude.fix,
pixel.length = dat$pixel.length)
summary(dat$bal.length)
hist(dat$bal.length, breaks = 20, xlab = "estimated length of Balaena (m)", main = "")
View(dat)
dat <- dat[which(dat$imageWidth==3840),]
dat$bal.length<- length.morphometrix(altitude = dat$altitude.fix,
pixel.length = dat$pixel.length)
summary(dat$bal.length)
summary(dat$bal.length)
hist(dat$bal.length, breaks = 20, xlab = "estimated length of Balaena (m)", main = "")
abline(v = 12.03, col = 2, lwd = 2)
dat$error <- dat$bal.length-12.03
mean(dat$error)
sd(dat$error)
a <- read.csv("/Users/anacristinaeguigurenburneo/Documents/DJIMini2_FocalLength_Measurement/DJIMini2_FocalLength_Measurement.csv", header = T)
View(a)
#estimate a different alpha for each resolution:
estimate.alpha <- function(length, distance, pixel.length){
}
#estimate a different alpha for each resolution:
estimate.alpha <- function(length, distance, pixel.length){
length/(distance*pixel.length)
}
head(alpha)
head(a)
a$alpha <- estimate.alpha(length = a$True_Length,
istance = a$Distance,
pixel.length = a$Pixel_Length)
a$alpha <- estimate.alpha(length = a$True_Length,
distance = a$Distance,
pixel.length = a$Pixel_Length)
summary(a$alpha)
a$res <- "low"
a$res[which(a$Image_Width>2000)] <- 'high'
a$res <- factor(a$res)
plot(a$alpha, col = as.numeric(a$res))
#the second one is off!, omit
a[-c(3,4),]
#the second one is off!, omit
a <- a[-c(3,4),]
library(tidyverse)
a %>% group_by(res)
a %>% group_by(res) %>% summarise(alpha = mean(alpha))
alpha.results<- a %>% group_by(res) %>% summarise(alpha = mean(alpha))
alpha1920 = 0.000656
3840/1920
0.000328/0.000656
true.length <- 1000
# measured at 6 m:
true.dist <- 2500
# imagine true alpha is 1.26
true.alpha <- 0.000328
# true image width
image.width <- 3840
# then pixel length should be: 1015.883
true.pixlength <- (true.length/true.dist)*(true.alpha)
true.pixlength
# then pixel length should be: 1015.883
true.pixlength <- true.length/(true.dist*true.alpha)
true.pixlength
true.length <- 1000
# measured at 6 m:
true.dist <- 2500
# imagine true alpha is 1.26
true.alpha <- 0.000328
true.length/(true.dist*true.alpha)
#if I measure distance with a 1 inch error maximum (4cm)
set.seed(9909)
dist.err <- rnorm(1000, mean = 0, sd = 1)
hist(dist.err)
measured.dist <- true.dist+dist.err
# and measure the object with a 1/4 inch error (<1 cm error)
length.err <- rnorm(1000, mean = 0, sd = 0.25)
hist(length.err)
measured.length <- length.err +true.length
px.error <- rnorm(1000, mean = 0, sd = 0.5)
hist(px.error)
measured.px <- px.error + true.pixlength
est.alpha <- estimate.alpha(length = measured.length,
distance = measured.dist,
pixel.length = measured.px)
hist(est.alpha, breaks = 30)
abline(v = true.alpha, col =2)
summary(est.alpha)
morpho.length.alpha <- function(alpha, altitude, length.pixels){
length = alpha * altitude * length.pixels
}
morpho.length.alpha <- function(alpha, altitude, length.pixels){
length = alpha * altitude * length.pixels
}
est.length <- morpho.length.alpha(alpha = est.alpha, altitude = measured.dist, length.pixels = measured.px)
hist(est.length, breaks = 30)
err<- abs(est.length - true.length)
hist(err, breaks = 30)
#percent error:
unname(quantile(err, probs = (0.99)))*100/true.length
true.length <- 2000
# measured at 6 m:
true.dist <- 6000
# imagine true alpha is 1.26
true.alpha <- 0.000328
# true image width
image.width <- 3840
# then pixel length should be: 1219.512
true.pixlength <- true.length/(true.dist*true.alpha)
#if I measure distance with a 1 inch error maximum (4cm)
set.seed(9909)
dist.err <- rnorm(1000, mean = 0, sd = 1)
hist(dist.err)
measured.dist <- true.dist+dist.err
# and measure the object with a 1/4 inch error (<1 cm error)
length.err <- rnorm(1000, mean = 0, sd = 0.25)
hist(length.err)
measured.length <- length.err +true.length
px.error <- rnorm(1000, mean = 0, sd = 0.5)
hist(px.error)
measured.px <- px.error + true.pixlength
est.alpha <- estimate.alpha(length = measured.length,
distance = measured.dist,
pixel.length = measured.px)
hist(est.alpha, breaks = 30)
abline(v = true.alpha, col =2)
summary(est.alpha)
morpho.length.alpha <- function(alpha, altitude, length.pixels){
length = alpha * altitude * length.pixels
}
est.length <- morpho.length.alpha(alpha = est.alpha, altitude = measured.dist, length.pixels = measured.px)
hist(est.length, breaks = 30)
err<- abs(est.length - true.length)
hist(err, breaks = 30)
#percent error:
unname(quantile(err, probs = (0.99)))*100/true.length
alpha1920
true.length <- 2000
# measured at 6 m:
true.dist <- 6000
# imagine true alpha is 0.000656
true.alpha <- 0.000656
# true image width
image.width <- 1920
# then pixel length should be: 1219.512
true.pixlength <- true.length/(true.dist*true.alpha)
true.pixlength
#if I measure distance with a 1 inch error maximum (4cm)
set.seed(9909)
dist.err <- rnorm(1000, mean = 0, sd = 1)
hist(dist.err)
measured.dist <- true.dist+dist.err
# and measure the object with a 1/4 inch error (<1 cm error)
length.err <- rnorm(1000, mean = 0, sd = 0.25)
hist(length.err)
measured.length <- length.err +true.length
px.error <- rnorm(1000, mean = 0, sd = 0.5)
hist(px.error)
measured.px <- px.error + true.pixlength
est.alpha <- estimate.alpha(length = measured.length,
distance = measured.dist,
pixel.length = measured.px)
hist(est.alpha, breaks = 30)
abline(v = true.alpha, col =2)
summary(est.alpha)
morpho.length.alpha <- function(alpha, altitude, length.pixels){
length = alpha * altitude * length.pixels
}
est.length <- morpho.length.alpha(alpha = est.alpha, altitude = measured.dist, length.pixels = measured.px)
hist(est.length, breaks = 30)
err<- abs(est.length - true.length)
hist(err, breaks = 30)
#percent error:
unname(quantile(err, probs = (0.99)))*100/true.length
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/anacristinaeguigurenburneo/Documents/DJI_Mini2_Measurement_Error/")
source("Scripts/Gal23_DroneMeasurementError_DataPrep.R")
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/anacristinaeguigurenburneo/Documents/DJI_Mini2_Measurement_Error/")
source("Scripts/Gal23_DroneMeasurementError_DataPrep.R")
library(ggplot2)
View(dat)
px.length <- function(l.m, p.d, f.l = 4.25531, a.m){
(l.m/p.d)*(f.l/a.m)
}
#calculate pixel length:
dat$pixel.length <- px.length(l.m=dat$length,
p.d = dat$pixelDimension.old,
a.m = dat$altitude)
# fix pixel dimensions:
dat$pixelDimension<-NA
dat$pixelDimension <- 6.2/dat$ImageWidth
dat<- dat %>% select(Date, FlightNo, imageName, timeStamp, altitudeRaw = altitude, imageWidth = ImageWidth, pixel.length, position = pos)
View(dat)
head(dat)
#recalculate Balaena's length in m, with new altitude
boat.height = 1.03- 0.24# balaena's altitude over the water - toe rail
launch.chest = 1.4 # Mateo's chest height
camera.height = 0.045 # cameras distance above the base of the drone's legsfrom legs
dat$altitude.fix <- dat$altitude + launch.chest + camera.height
head(dat)
morpho.length.alpha <- function(image.width, altitude, length.pixels){
if(image.width == 3840){
alpha = 0.000328 }
else if (image.width == 1929){
alpha = 0.000656
}else{print("alpha not known for given image width")}
length = alpha * altitude * length.pixels
}
dat$bal.length<- morpho.length.alpha(altitude = dat$altitude.fix,
image.width = dat$imageWidth,
length.pixels = dat$pixel.length)
morpho.length.alpha <- function(image.width, altitude, length.pixels){
if(image.width == 3840){
alpha = 0.000328 }
else if (image.width == 1920){
alpha = 0.000656
}else{print("alpha not known for given image width")}
length = alpha * altitude * length.pixels
}
dat$bal.length<- morpho.length.alpha(altitude = dat$altitude.fix,
image.width = dat$imageWidth,
length.pixels = dat$pixel.length)
image.width = dat$imageWidth
altitude = dat$altitude.fix
length.pixels = dat$pixel.length
image.width == 3840
if(image.width == 3840){
alpha = 0.000328 }
